{"meta":{"title":"山外小楼","subtitle":"前端攻略","description":"我是萌新","author":"萌新","url":"http://iyue.top"},"pages":[{"title":"关于","date":"2018-08-12T06:34:55.000Z","updated":"2018-08-12T06:35:59.368Z","comments":true,"path":"about/index.html","permalink":"http://iyue.top/about/index.html","excerpt":"","text":""},{"title":"分类","date":"2018-07-16T07:25:27.000Z","updated":"2018-08-21T02:53:20.608Z","comments":false,"path":"categories/index.html","permalink":"http://iyue.top/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-07-16T07:24:04.000Z","updated":"2018-08-21T02:53:11.175Z","comments":false,"path":"tags/index.html","permalink":"http://iyue.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"将本地代码关联到远程仓库","slug":"将本地代码关联到远程仓库","date":"2018-08-16T06:28:57.000Z","updated":"2018-08-21T04:36:35.945Z","comments":true,"path":"2018/08/16/将本地代码关联到远程仓库/","link":"","permalink":"http://iyue.top/2018/08/16/将本地代码关联到远程仓库/","excerpt":"","text":"在项目的建立初期都是先搭建基础框架，在完成基础框架的搭建后，才把代码放到代码管理服务器上，让项目组成员进行检出从而进行需求的开发。而基础框架的搭建大部分都是先在个人的电脑上完成的，当完成框架搭建后，此时就要把代码共享到代码服务器上供开发人员检出。 准备工作本地安装git，在远程建有仓库，由于我们是将本地代码推到远程仓库，所以建远程仓库的时候不要进行初始化，即不必在仓库下添加任何文件，如readme.mdd等。 本地仓库初始化123git init // 初始化版本库git add . // 添加文件到版本库（只是添加到缓存区），.代表添加文件夹下所有文件 git commit -m \"first commit\" // 把添加的文件提交到版本库，并填写提交备注 关联推送123git remote add origin 你的远程库地址 // 把本地库与远程库关联git push -u origin master // 第一次推送时git push origin master // 第一次推送后，直接使用该命令即可推送修改 之后可能需要输入用户名密码，或者是ssh的形式。","categories":[],"tags":[{"name":"git","slug":"git","permalink":"http://iyue.top/tags/git/"}]},{"title":"vue中引入图片的方式","slug":"vue中引入图片的方式","date":"2018-08-16T06:11:14.000Z","updated":"2018-08-16T06:12:07.879Z","comments":true,"path":"2018/08/16/vue中引入图片的方式/","link":"","permalink":"http://iyue.top/2018/08/16/vue中引入图片的方式/","excerpt":"","text":"在 template 的 img 标签等和 css 的背景图中1&lt;img class=\"logo-img\" src=\"~@/assets/logo/logo.png\" key=\"max-logo\" /&gt; 1background: url(~@/assets/dongdong.png) 4px 4px no-repeat; 其中‘~’为的是让 webpack 识别这是一个路径，‘@’表示 webpack 中配置的路径别名，此处表示 src 文件夹 在 js 中作为变量引入时，需要以 require 的方式引入123default_avatar() &#123; return require('@/assets/avatar/avatar_' + this.name.length % 10 + '.png')&#125; 此处引入不需要前面写‘~’ assets与static的区别 静态文件（主要指图片）均放在了src文件夹下的assets下，此处考虑到引入的资源都是属于项目本身的文件；此处的文件会被webpack的插件处理，如压缩，base64，hash等； static中应放置公共的类库等，如jQuery；此处的文件会直接复制到输出文件夹dist下的static中，不会被webpack处理；引入时直接以绝对路径引入即可。","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://iyue.top/tags/vue/"}]},{"title":"node在Windows下的安装与配置","slug":"node在Windows下的安装与配置","date":"2018-08-16T02:16:35.000Z","updated":"2018-08-16T02:37:34.704Z","comments":true,"path":"2018/08/16/node在Windows下的安装与配置/","link":"","permalink":"http://iyue.top/2018/08/16/node在Windows下的安装与配置/","excerpt":"","text":"安装在Windows下安装node很简单，直接取官网下载安装包，一路next就可以了，最新的安装包包含了npm，也会默认把node运行文件所在的目录添加到环境变量中。 当在终端执行node -v命令时，输出相应版本号说明安装成功。 配置npm默认的模块缓存路径及全局安装路径都在C盘，习惯上我们自行指定一个位置，一般会把node安装在D盘，相应的路径也设置在node目录下 在nodejs的目录下提前创建好两个文件夹node_global和node_cache 如下命令设置路径：12npm config set prefix \"D:\\\\nodejs\\\\node_global\"npm config set cache \"D:\\\\nodejs\\\\node_cache\" 设置完成后可通过npm config ls查看相关设置 此时需要将node_global路径加入到环境变量，这样保证终端可以找到全局安装的模块 注意有些教程里会指导将全局模块的路径直接设置在nodejs目录下1npm config set prefix \"D:\\\\nodejs\" 全局安装的模块会安装在node_modules下，和默认安装的npm在一起，命令文件就在nodejs下，这样就不需要再添加环境变量了 但这种做法会带来一个问题就是，无法通过npm un npm@lstest -g来升级npm模块，因为npm无法再升级安装的时候覆盖自己，而正常的npm升级是在全局模块的路径安装最新的npm，所以按照开头的路径设置，在node在会有两个npm，一个是默认安装的，一个是升级的时候安装在全局路径的。 所以还是建议全局路径设置另外的文件路径，并添加至环境变量。","categories":[],"tags":[{"name":"node","slug":"node","permalink":"http://iyue.top/tags/node/"}]},{"title":"css中如何使用wwebpack路径别名","slug":"css中如何使用wwebpack路径别名","date":"2018-08-12T05:59:32.000Z","updated":"2018-08-12T06:54:25.422Z","comments":true,"path":"2018/08/12/css中如何使用wwebpack路径别名/","link":"","permalink":"http://iyue.top/2018/08/12/css中如何使用wwebpack路径别名/","excerpt":"","text":"引言在用 Webpack 处理打包时，可将某一目录配置一个别名，代码中就能使用与别名的相对路径引用资源。在 Vue 项目中，我们通常使用 vue-webpack 脚手架生成工程模板，然后配置 @ 为项目根目录下放资源和源码的 /src 目录的别名。123456resolve: &#123; ..., alias: &#123; '@': resolve('src') &#125;&#125; 这样我们就可以在 js 中用导入模板文件或者js就可以用如下方式导入：1import tool from '@/style/xxx' 但是在样式文件（css/less/scss等）中，使用 @import “@/style/theme” 的语法引用相对 @ 的目录确会报错，“找不到 ‘@’ 目录”，说明 webpack 没有正确识别资源相对路径。 分析原因是 css 文件会被用 css-loader 处理，这里 css @import 后的字符串会被 css-loader 视为绝对路径解析，因为我们并没有添加 css-loader 的 alias，所以会报找不到 @ 目录。 解决在 Webpack 中 css import 使用 alias 相对路径的解决办法有两种； 方法一-添加模块路径直接为 css-loader 添加 ailas 的路径，但是在 vue-webpack 给的模板中，单独针对这个插件添加配置就显得麻烦冗余了；方法是：123456789// 添加配置modules: [ resolve('src'), resolve('node_modules') ],alias: &#123; 'vue$': 'vue/dist/vue.esm.js', '@': resolve('src'), &#125; 这样我们就可以在vue页面如下导入css文件1@import '~assets/css/all.scss'; // assets是src目录下的文件夹 方法二-添加‘~’符号是在引用路径的字符串最前面添加上 ~ 符号，如下1@import '~@/assets/css/all.scss'; // assets是src目录下的文件夹 Webpack 会将以 ~ 符号作为前缀的路径视作依赖模块而去解析，这样 @ 的 alias 配置就能生效了。 看起来还是方法二方便，不用配置webpack，直接使用。 总结~ 视为模块解析是 webpack 做的事，不是 css-loader 做的事。各类非 js 直接引用（import require）静态资源，依赖相对路径加载问题，都可以用 ~ 语法完美解决。123css module 中： @import \"~@/style/theme\"css 属性中： background: url(\"~@/assets/xxx.jpg\")html 标签中： &lt;img src=\"~@/assets/xxx.jpg\" alt=\"alias\"&gt;","categories":[{"name":"webpack","slug":"webpack","permalink":"http://iyue.top/categories/webpack/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"http://iyue.top/tags/webpack/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-08-11T10:16:44.746Z","updated":"2018-08-11T10:16:44.746Z","comments":true,"path":"2018/08/11/hello-world/","link":"","permalink":"http://iyue.top/2018/08/11/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment test","categories":[],"tags":[]}]}